function drawGotoGame() {
	background(100);

	let elapsed = millis() - gamePlayStartTime;
	timeLeft = maxTime - elapsed;

	if (timeLeft <= 0) {
		gameLostDueToTime = true;
		gameState = "loseScreen";
		return;
	}

	// Timer display
	fill('white');
	textSize(24);
	textAlign(LEFT, TOP);
	text(`Time left: ${floor(timeLeft / 1000)}s`, 20, 20);



	// Top-down environment sections
	drawTopDownEnvironment();



	// Draw obstacles
	fill(255, 0, 0);
	for (let obs of obstacles) {
		rect(obs.x, obs.y, obs.w, obs.h);
	}



	// Check win condition
	if (y < 30) {
		gameState = "black2";
		return;
	}

	let sectionHeight = height / 7;
	let inRiver = (y > sectionHeight * 3 && y < sectionHeight * 4);

	let onLog = false;
	let logSpeed = 0;

	// === Check for collision with logs ===
	for (let obs of obstacles) {
		if (obs.type === "log" && collideRectCircle(obs.x, obs.y, obs.w, obs.h, x, y, 40)) {
			onLog = true;
			logSpeed = obs.speed * obs.dir;
			break; // only need one
		}
	}

	// === Apply log movement or lose game ===
	if (inRiver) {
		if (onLog) {
			x += logSpeed;

			// Prevent player from going off screen while on log
			x = constrain(x, 0, width);
		} else {
			gameResult = "lose";
			gameState = "loseScreen";
			return;
		}
	}

	// Check obstacle collisions
	for (let obs of obstacles) {
		// Move if type is car or log
		if (obs.type === "car" || obs.type === "log") {
			obs.x += obs.speed * obs.dir;

			// Wrap around screen
			if (obs.x > width + 50) obs.x = -obs.w;
			if (obs.x < -obs.w - 50) obs.x = width;
		}

		// Draw obstacle
		if (obs.type === "car") {
			// Car base
			fill(255, 0, 0);
			rect(obs.x, obs.y, obs.w, obs.h, 10);

			// Windows
			fill(0, 100, 200);
			rect(obs.x + 10, obs.y + 5, obs.w - 20, obs.h - 10, 5);

			// Wheels
			fill(0);
			ellipse(obs.x + 10, obs.y + obs.h, 10, 10);
			ellipse(obs.x + obs.w - 10, obs.y + obs.h, 10, 10);
		} else if (obs.type === "log") {
			fill(139, 69, 19);
			rect(obs.x, obs.y, obs.w, obs.h);
		} else if (obs.type === "tree") {
			fill(0, 150, 0);
			rect(obs.x, obs.y, obs.w, obs.h);
		}


		rect(obs.x, obs.y, obs.w, obs.h);

		// Collision check
		if (obs.type !== "log" && collideRectCircle(obs.x, obs.y, obs.w, obs.h, x, y, 40)) {
			gameResult = "lose";
			gameState = "loseScreen";
			return;
		}
		let sectionHeight = height / 7;
		let inRiver = (y > sectionHeight * 3 && y < sectionHeight * 4);
		let onLog = false;

		// Check if on a log
		for (let obs of obstacles) {
			if (obs.type === "log" && collideRectCircle(obs.x, obs.y, obs.w, obs.h, x, y, 40)) {
				onLog = true;
				break;
			}
		}

		if (inRiver && !onLog) {
			gameResult = "lose";
			gameState = "loseScreen";
			return;
		}
	}
	// Draw player
	imageMode(CENTER);
	image(player, x, y, 50, 50);
}

function drawTopDownEnvironment() {
	let sectionHeight = height / 7;

	// 1. Stadium
	fill('blue');
	rect(width / 2 - 60, 0, 120, 30);
	fill('white');
	textAlign(CENTER, CENTER);
	textSize(14);
	text("STADIUM", width / 2, 15);

	// 2. Sidewalk (top)
	fill(200);
	rect(0, sectionHeight * 1, width, sectionHeight);

	// 3. Park
	fill(0, 100, 0);
	rect(0, sectionHeight * 2, width, sectionHeight);

	// 4. River (Middle)
	fill('skyblue');
	rect(0, sectionHeight * 3, width, sectionHeight);

	// 5. Street
	fill(60);
	rect(0, sectionHeight * 4, width, sectionHeight);

	// 6. Sidewalk (bottom)
	fill(200);
	rect(0, sectionHeight * 5, width, sectionHeight);

	// 7. Lawn and House
	fill(34, 139, 34);
	rect(0, sectionHeight * 6, width, sectionHeight);

	fill(180, 120, 80); // house
	rect(width / 2 - 60, height - sectionHeight + 10, 120, sectionHeight - 20);
	fill(100, 50, 0); // door
	rect(width / 2 - 15, height - 30, 30, 20);
}

function generateObstacles() {
	let sectionHeight = height / 7;
	let obs = [];

	// === LOGS (River, middle section) ===
	let numLogLanes = 5; // ⬅️ now 4 lanes
	let logsPerLane = 3;
	let logLaneHeight = 30;
	for (let lane = 0; lane < numLogLanes; lane++) {
		let y = sectionHeight * 3 + 5 + lane * logLaneHeight; // spreads logs vertically in river
		for (let i = 0; i < logsPerLane; i++) {
			let spacing = width / logsPerLane;
			obs.push({
				x: i * spacing,
				y: y,
				w: 100,
				h: 25,
				speed: random(1.5, 2.5),
				dir: lane % 2 === 0 ? 1 : -1,
				type: "log"
			});
		}
	}

	// === CARS (Street, below river) ===
	let numCarLanes = 3;
	let carsPerLane = 3;
	let carLaneHeight = 40;
	for (let lane = 0; lane < numCarLanes; lane++) {
		let y = sectionHeight * 4 + 5 + lane * carLaneHeight;
		for (let i = 0; i < carsPerLane; i++) {
			let spacing = width / carsPerLane;
			obs.push({
				x: i * spacing,
				y: y,
				w: 90,
				h: 35,
				speed: random(2, 3.5),
				dir: lane % 2 === 0 ? 1 : -1,
				type: "car"
			});
		}
	}

	// === TREES (Park section, static) ===
	for (let i = 0; i < 6; i++) {
		obs.push({
			x: random(30, width - 60),
			y: sectionHeight * 2 + random(10, sectionHeight - 50),
			w: 40,
			h: 50,
			type: "tree"
		});
	}

	return obs;
}


function collideRectCircle(rx, ry, rw, rh, cx, cy, diameter) {
	let testX = cx;
	let testY = cy;

	if (cx < rx) testX = rx;
	else if (cx > rx + rw) testX = rx + rw;

	if (cy < ry) testY = ry;
	else if (cy > ry + rh) testY = ry + rh;

	let distX = cx - testX;
	let distY = cy - testY;
	let distance = sqrt(distX * distX + distY * distY);

	return distance <= diameter / 2;
}

function resetGame() {
	x = width / 2;
	y = height - 50;
	gamePlayStartTime = millis();
	obstacles = generateObstacles();
	gameLostDueToTime = false;
	gameResult = "";
}
